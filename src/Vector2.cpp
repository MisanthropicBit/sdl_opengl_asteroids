#include "Vector2.hpp"
#include "Math.hpp"
#include <cmath>
#include <iostream>

//=========================================================================================================================

Vector2::Vector2() {
	this->x = 0.f;
	this->y = 0.f;
}

//=========================================================================================================================

Vector2::Vector2(float x, float y) {
	this->x = x;
	this->y = y;
}

//=========================================================================================================================

void Vector2::Rotate(float angle) {
	float angleradians = angle * Math::Degs2Rads;
	float length = Length();

	x = length * cos(angleradians);
	y = - length * sin(angleradians); // This needs to be inversed because of the
}

//=========================================================================================================================

float Vector2::GetAngle() const	{
	float result = atan2(-y, x) * Math::Rads2Degs;

	if(result < 0.f)
		result += 360.f;
	if(result > 360.f)
		result -= 360.f;

	return result;
}

//=========================================================================================================================

float Vector2::Length() const {
	return sqrt(std::abs(x) * std::abs(x) + std::abs(y) * std::abs(y));
}

//=========================================================================================================================

bool Vector2::IsZero() {
	if(x == 0 && y == 0)
		return true;

	return false;
}

//=========================================================================================================================

void Vector2::Zero() {
	x = 0;
	y = 0;
}

//=========================================================================================================================

void Vector2::Normalize() {
	if(!this->IsZero()) {
		x /= this->Length();
		y /= this->Length();
	}
}

//=========================================================================================================================

float Vector2::DotProduct(const Vector2& v) {
	return (x * v.x + y * v.y);
}

//=========================================================================================================================

float Vector2::DotProduct(const Vector2& v1, const Vector2& v2) {
	return (v1.x * v2.x + v1.y * v2.y);
}

//=========================================================================================================================

void Vector2::operator= (const Vector2& v) {
	x = v.x;
	y = v.y;
}

//=========================================================================================================================

Vector2 Vector2::operator+ (const Vector2* v) {
	if(v)
		return Vector2(this->x + v->x, this->y + v->y);
}

//=========================================================================================================================

Vector2 Vector2::operator+ (const Vector2& v) {
	return (Vector2(x + v.x, y + v.y));
}

//=========================================================================================================================

Vector2 Vector2::operator- (const Vector2& v) {
	return (Vector2(x - v.x, y - v.y));
}

//=========================================================================================================================

Vector2 Vector2::operator* (const Vector2& v) {
	return (Vector2(x * v.x, y * v.y));
}

//=========================================================================================================================

Vector2 Vector2::operator/ (const Vector2& v) {
	if (v.x != 0.f && v.y != 0.f)
		return (Vector2(x / v.x, y / v.y));

	return Vector2(0, 0);
}

//=========================================================================================================================

void Vector2::operator+= (const Vector2& v) {
	x += v.x;
	y += v.y;
}

//=========================================================================================================================

void Vector2::operator-= (const Vector2& v) {
	x -= v.x;
	y -= v.y;
}

//=========================================================================================================================

void Vector2::operator*= (const Vector2& v) {
	x *= v.x;
	y *= v.y;
}

//=========================================================================================================================

void Vector2::operator/= (const Vector2& v) {
	if (v.x != 0.f && v.y != 0.f) {
		x /= v.x;
		y /= v.y;
	}
}

//=========================================================================================================================

Vector2 Vector2::operator+ (float f) {
	return (Vector2(x + f, y + f));
}

//=========================================================================================================================

Vector2 Vector2::operator- (float f) {
	return (Vector2(x - f, y - f));
}

//=========================================================================================================================

Vector2 Vector2::operator* (float f) {
	return (Vector2(x * f, y * f));
}

//=========================================================================================================================

Vector2 Vector2::operator/ (float f) {
	if (f != 0.f)
		return (Vector2(x / f, y / f));

	return Vector2(0, 0);
}

//=========================================================================================================================

void Vector2::operator+= (float f) {
	x += f;
	y += f;
}

//=========================================================================================================================

void Vector2::operator-= (float f) {
	x -= f;
	y -= f;
}

//=========================================================================================================================

void Vector2::operator*= (float f) {
	x *= f;
	y *= f;
}

//=========================================================================================================================

void Vector2::operator/= (float f) {
	if (f != 0.f)
	{
		x /= f;
		y /= f;
	}
}

//=========================================================================================================================

bool Vector2::operator== (const Vector2& v) {
	return (x == v.x && y == v.y);
}

//=========================================================================================================================

bool Vector2::operator!= (const Vector2& v) {
	return (x != v.x || y != v.y);
}

//=========================================================================================================================
